{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UNITBRASIL\\\\Documents\\\\hunter\\\\rocketseat bootcamp\\\\Frontend\\\\react\\\\git\\\\src\\\\pages\\\\Dashboard\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\nimport Logo from \"../../assets/logo.svg\";\nimport { Title, Form, Repositories, Error } from './styles';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState(() => {\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n\n    return [];\n  }); // usando o state para quando os valores forem dinâmicos, ou seja, quando os valores forem consumir dados da minha API\n\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories));\n  }, [repositories]);\n\n  async function handleAddRepository(event) {\n    event.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do repositório');\n      return;\n    }\n\n    try {\n      const response = await api.get(`repos/${newRepo}`);\n      const repository = response.data;\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch (err) {\n      setInputError('Erro na busca por esse repositório');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: Logo,\n      alt: \"Github explorer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Title, {\n      children: \" Explore reposit\\xF3rios do github\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      hasError: !!inputError,\n      onSubmit: handleAddRepository,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newRepo,\n        onChange: e => setNewRepo(e.target.value),\n        placeholder: \"Digite aqui o nome do reposit\\xF3rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Pesquisar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), inputError && /*#__PURE__*/_jsxDEV(Error, {\n      children: inputError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(Repositories, {\n      children: repositories.map(repository => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/repositories/${repository.full_name}`,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: repository.owner.avatar_url,\n          alt: repository.owner.login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: repository.full_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: repository.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FiChevronRight, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, repository.full_name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Dashboard, \"Hf2b/TgxxXwR9hspImBaH0q6p4Q=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/UNITBRASIL/Documents/hunter/rocketseat bootcamp/Frontend/react/git/src/pages/Dashboard/index.tsx"],"names":["React","useState","Link","FiChevronRight","api","Title","Form","Repositories","Error","useEffect","Dashboard","newRepo","setNewRepo","inputError","setInputError","repositories","setRepositories","storagedRepositories","localStorage","getItem","JSON","parse","setItem","stringify","handleAddRepository","event","preventDefault","response","get","repository","data","err","Logo","e","target","value","map","full_name","owner","avatar_url","login","description"],"mappings":"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","sourcesContent":["import React, { useState, FormEvent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\n\nimport Logo from '../../assets/logo.svg';\nimport { Title, Form, Repositories, Error } from './styles';\nimport { useEffect } from 'react';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n    return [];\n  });\n\n  // usando o state para quando os valores forem dinâmicos, ou seja, quando os valores forem consumir dados da minha API\n\n\n\n  useEffect(()=> {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories)\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {\n    event.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do repositório');\n      return;\n    }\n\n\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch (err) {\n      setInputError('Erro na busca por esse repositório');\n    }\n  }\n\n  return (\n    <>\n      <img src={Logo} alt=\"Github explorer\" />\n      <Title> Explore repositórios do github</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n\n        <input\n          value={newRepo}\n          onChange={e => setNewRepo(e.target.value)}\n\n          placeholder=\"Digite aqui o nome do repositório\" />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories >\n        {repositories.map(repository =>\n\n          <Link key={repository.full_name} to={`/repositories/${repository.full_name}`}>\n            <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </Link>\n\n        )}\n\n\n      </Repositories>\n\n    </>\n  )\n};\n\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}